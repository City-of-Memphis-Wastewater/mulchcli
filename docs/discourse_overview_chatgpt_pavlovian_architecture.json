{
  "project_name": "mulchcli",
  "project_purpose": "A modular, standalone CLI tool for bootstrapping and managing multi-project software environments. Designed to be reusable, extensible, and friendly to open-source users and teams.",
  "theme": "Soil preparation, planting seeds, tree growth — metaphors for project creation and modular configuration.",
  "repository_type": "Standalone PyPI package usable in other projects via 'poetry add mulchcli'",

  "cli_use_cases": [
    "Scaffold a new project directory under 'projects/'",
    "Initialize a TOML config with schema tailored to a specific project",
    "List existing projects and their paths",
    "Validate the structure or health of a given project folder",
    "Auto-generate folders like 'addresses/', 'configs/', 'exports/', etc.",
    "Future: project renaming, deletion, or environment switching"
  ],

  "mulchcli": {
    "package_name": "mulchcli",
    "entry_point": "mulchcli.cli:main",
    "language_version": "Python >=3.10",
    "tooling": {
      "packaging": "Poetry",
      "build_backend": "poetry-core",
      "testing_framework": "pytest",
      "script_runner": "Click"
    },
    "directory_structure": {
      "mulchcli/": {
        "__init__.py": "Package initializer",
        "cli.py": "Click-based command interface",
        "project.py": "Helper logic to generate and manage project templates",
        "config.py": "TOML-based config scaffolding/validation logic"
      },
      "tests/": {
        "test_cli.py": "Pytest unit tests for CLI commands"
      },
      "README.md": "Usage, philosophy, and examples",
      "pyproject.toml": "PEP 621 compatible, uses [project] instead of [tool.poetry]",
      "Makefile": "Automation targets for build/test/publish",
      "scripts/": {
        "install.sh": "Local install script (Linux)",
        "install.ps1": "Local install script (PowerShell)"
      }
    }
  },

  "mysoftware_version": {
    "purpose": "A robust, modular template for extensible scientific or industrial software with full separation of logic and configuration. Built to support PyInstaller, Docker, PyPI, and other deployment targets.",
    "alternate_name": "pavlovian-template",
    "structure": {
      "mysoftware_version/": {
        "projects/": {
          "project_default/": [
            "configs/",
            "db/",
            "docs/",
            "exports/",
            "groupings/",
            "imports/",
            "scripts/",
            "addresses/ (optional)",
            "env/ (optional)"
          ],
          "project1/": "...",
          "project2/": "..."
        },
        "src/": {
          "mysoftware/": {
            "__init__.py": "App init",
            "__main__.py": "Terminal entry point",
            "api/": {
              "__init__.py": "",
              "endpoints/",
              "dependencies.py": "",
              "routers.py": "",
              "main.py": "FastAPI + Uvicorn entry"
            },
            "shell/": {
              "__init__.py": "",
              "cli.py": "cmd2/textual terminal interface",
              "views/": ""
            },
            "gui/": {
              "__init__.py": "",
              "main_window.py": "",
              "helpers.py": "FreeSimpleGUI helpers"
            },
            "startup/": {
              "__init__.py": "",
              "bootstrap.py": "Startup logic"
            },
            "services/": {
              "__init__.py": "",
              "address.py": "Includes config-parsing address logic",
              "directories.py": "",
              "environment.py": ""
            },
            "core/": {
              "__init__.py": "",
              "your_core_logic.py": "Specialized logic unique to this software"
            },
            "helpers/": {
              "__init__.py": "",
              "utils.py": ""
            },
            "scripts/": {
              "__init__.py": "",
              "regenerate_schema.py": "Dev tools"
            },
            "serial/": {
              "__init__.py": "",
              "serial_comm.py": "pyserial handling"
            },
            "db/": {
              "__init__.py": "",
              "models.py": "",
              "crud.py": "",
              "migrations/": ""
            }
          }
        },
        "docs/": {
          "index.md": "High-level project documentation"
        },
        "plugins/": {
          "__init__.py": ""
        },
        "media/": {
          "media-ico/": {
            "logo.png": ""
          }
        },
        "scripts/": {
          "entrypoint.sh": "",
          "entrypoint.ps1": "",
          "install.ps1": "",
          "install.sh": ""
        },
        "run.bat": "",
        "run.ps1": "",
        "run.sh": "",
        "pyproject.toml": "Poetry configuration for this package",
        "poetry.lock": "",
        "Makefile": "Build commands and automation",
        "README.md": ""
      }
    }
  },

  "testing": {
    "framework": "pytest",
    "installation": "poetry install --with dev",
    "execution": "pytest or poetry run pytest",
    "user_note": "Tests are not included when mulchcli is installed as a dependency"
  },

  "packaging_and_publishing": {
    "tools": {
      "poetry": {
        "build": "poetry build",
        "publish": "poetry publish --build",
        "install": "poetry add mulchcli"
      },
      "twine": {
        "note": "Twine is traditionally used for PyPI uploads, but with Poetry 1.2+, you don’t need Twine unless you're doing something custom"
      }
    },
    "build_system": "poetry-core (recommended)",
    "distribution_targets": [
      "PyPI",
      "Docker",
      "Wheel (.whl)",
      "PyInstaller EXE",
      "DEB repo"
    ]
  },

  "configuration_design": {
    "format": "TOML",
    "access_pattern": "config.get([\"some_key\"])",
    "variability": "Each project can have its own TOML schema",
    "management": "Handled via mulchcli config init or manual editing",
    "directories_to_consider": [
      "projects/projectname/configs/",
      "projects/projectname/addresses/",
      "projects/projectname/env/"
    ],
    "folder_design_recommendation": {
      "configs/": "Recommended for most structured settings",
      "addresses/": "Recommended for URL, database, and port info",
      "env/": "Optional; could replace both above or act as a sandbox"
    }
  }
}
